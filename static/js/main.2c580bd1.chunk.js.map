{"version":3,"sources":["../node_modules/pokemon/data sync /^/.*/.json$","Pokegame.js","Pokecard.js","Pokedex.js","App.js","serviceWorker.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","Pokecard","number","imgSrc","this","props","slice","className","name","src","alt","exp","Component","Pokedex","title","isWinner","pokemon","p","key","totalExp","pokeList","length","push","getName","Math","floor","random","forEach","getId","Pokegame","hand1","hand2","randIdx","randPokemon","splice","exp1","reduce","exp2","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2c580bd1.chunk.js","sourcesContent":["var map = {\n\t\"./de.json\": 22,\n\t\"./en.json\": 7,\n\t\"./fr.json\": 23,\n\t\"./ja.json\": 24,\n\t\"./ko.json\": 25,\n\t\"./ru.json\": 26,\n\t\"./zh-hans.json\": 27,\n\t\"./zh-hant.json\": 28\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 21;","import React, { Component } from 'react';\nimport Pokedex from './Pokedex';\nimport pokemon from 'pokemon';\n\nlet pokeList = [];\n\nwhile (pokeList.length < 8) {\n  pokeList.push({ name: pokemon.getName(Math.floor(Math.random() * 151) + 1) });\n}\n\npokeList.forEach((p) => {\n  p.id = pokemon.getId(p.name);\n  p.exp = Math.floor(Math.random() * 999) + 1;\n});\n\nexport class Pokegame extends Component {\n  static defaultProps = {\n    pokemon: pokeList,\n  };\n\n  render() {\n    let hand1 = [];\n    let hand2 = [...this.props.pokemon];\n\n    while (hand1.length < hand2.length) {\n      let randIdx = Math.floor(Math.random() * hand2.length);\n      let randPokemon = hand2.splice(randIdx, 1)[0];\n      hand1.push(randPokemon);\n    }\n\n    let exp1 = hand1.reduce((exp, pokemon) => exp + pokemon.exp, 0);\n    let exp2 = hand2.reduce((exp, pokemon) => exp + pokemon.exp, 0);\n\n    return (\n      <div className=\"Pokegame\">\n        <Pokedex pokemon={hand1} totalExp={exp1} isWinner={exp1 > exp2} />\n        <Pokedex pokemon={hand2} totalExp={exp2} isWinner={exp2 > exp1} />\n      </div>\n    );\n  }\n}\n\nexport default Pokegame;\n","import React, { Component } from 'react';\nimport './Pokecard.css';\n\nconst POKE_API = 'https://assets.pokemon.com/assets/cms2/img/pokedex/detail/';\n\nconst padToThree = (number) =>\n  number <= 999 ? `00${number}`.slice(-3) : number;\n\nclass Pokecard extends Component {\n  render() {\n    let imgSrc = `${POKE_API}${padToThree(this.props.id)}.png`;\n    return (\n      <div className=\"Pokecard\">\n        <h1 className=\"Pokedex-title\">{this.props.name}</h1>\n        <div className=\"Pokecard-img\">\n          <img src={imgSrc} alt={this.props.name} />\n        </div>\n        <div className=\"Pokecard-data\">Exp: {this.props.exp}</div>\n      </div>\n    );\n  }\n}\n\nexport default Pokecard;\n","import React, { Component } from 'react';\nimport Pokecard from './Pokecard';\nimport './Pokedex.css';\n\nclass Pokedex extends Component {\n  render() {\n    let title;\n    if (this.props.isWinner) {\n      title = <h2 className=\"Pokedex-winner\">Winning Hand!</h2>;\n    } else {\n      title = <h2 className=\"Pokedex-loser\">Losing Hand!</h2>;\n    }\n    return (\n      <div className=\"Pokedex\">\n        {title}\n        <div className=\"Pokedex-cards\">\n          {this.props.pokemon.map((p) => (\n            <Pokecard key={p.id} id={p.id} name={p.name} exp={p.exp} />\n          ))}\n        </div>\n        <h4>Total Exp: {this.props.totalExp}</h4>\n      </div>\n    );\n  }\n}\n\nexport default Pokedex;\n","import React from 'react';\nimport './App.css';\nimport Pokegame from './Pokegame';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Pokegame />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}